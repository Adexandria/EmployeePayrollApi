// <auto-generated />
using System;
using EmployeePayroll.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeePayroll.Migrations
{
    [DbContext(typeof(DataDb))]
    [Migration("20210704180021_firstmigration")]
    partial class firstmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeePayroll.Entities.Address", b =>
                {
                    b.Property<Guid>("HomeAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HomeAddressId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.Bank", b =>
                {
                    b.Property<Guid>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Remainder")
                        .HasColumnType("bit");

                    b.Property<string>("StatementText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankAccountId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.DeductionLines", b =>
                {
                    b.Property<Guid>("DeductionLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CalculationType")
                        .HasColumnType("int");

                    b.Property<Guid>("PayTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DeductionLineId");

                    b.ToTable("DeductionLines");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.EarningsLines", b =>
                {
                    b.Property<Guid>("EarningsLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CalculationType")
                        .HasColumnType("int");

                    b.Property<double>("NormalNumberOfUnits")
                        .HasColumnType("float");

                    b.Property<Guid>("PayTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("RatePerUnit")
                        .HasColumnType("float");

                    b.HasKey("EarningsLineId");

                    b.ToTable("EarningsLines");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Homenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsAuthorizedToLeave")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PayTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("EmployeeId");

                    b.HasIndex("PayTemplateId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.LeaveBalances", b =>
                {
                    b.Property<Guid>("LeaveBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeaveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("int");

                    b.Property<Guid>("PayTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeOfUnits")
                        .HasColumnType("int");

                    b.HasKey("LeaveBalanceId");

                    b.ToTable("LeaveBalances");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.LeaveLines", b =>
                {
                    b.Property<Guid>("LeaveLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CalculationType")
                        .HasColumnType("int");

                    b.Property<int>("EntitlementFinalPayoutType")
                        .HasColumnType("int");

                    b.Property<string>("NumberofUnits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OpenbalanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LeaveLineId");

                    b.ToTable("LeaveLines");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.OpenBalances", b =>
                {
                    b.Property<Guid>("OpenBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaveLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("OpeningBalanceDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Tax")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OpenBalanceId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("LeaveLineId");

                    b.ToTable("OpenBalances");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.PayTemplates", b =>
                {
                    b.Property<Guid>("PayTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeductionLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EarningsLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaveBalanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaveLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReimbursementLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuperLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SuperMembershipId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PayTemplateId");

                    b.HasIndex("DeductionLineId");

                    b.HasIndex("EarningsLineId");

                    b.HasIndex("LeaveBalanceId");

                    b.HasIndex("LeaveLineId");

                    b.HasIndex("ReimbursementLineId");

                    b.HasIndex("SuperLineId");

                    b.HasIndex("SuperMembershipId");

                    b.ToTable("PayTemplates");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.ReimbursementLines", b =>
                {
                    b.Property<Guid>("ReimbursementLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PayTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReimbursementLineId");

                    b.ToTable("ReimbursementLines");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.SuperLines", b =>
                {
                    b.Property<Guid>("SuperLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CalculationType")
                        .HasColumnType("int");

                    b.Property<int>("ContributionType")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseAccountCode")
                        .HasColumnType("int");

                    b.Property<int>("LiabilityAccountCode")
                        .HasColumnType("int");

                    b.Property<double>("MininumMonthlyEarnings")
                        .HasColumnType("float");

                    b.Property<Guid>("PayTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuperLineId");

                    b.ToTable("SuperLines");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.SuperMemberships", b =>
                {
                    b.Property<Guid>("SuperMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("PayTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SuperFundId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SuperMembershipId");

                    b.ToTable("SuperMemberships");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.Address", b =>
                {
                    b.HasOne("EmployeePayroll.Entities.Employee", null)
                        .WithOne("HomeAddress")
                        .HasForeignKey("EmployeePayroll.Entities.Address", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeePayroll.Entities.Bank", b =>
                {
                    b.HasOne("EmployeePayroll.Entities.Employee", null)
                        .WithOne("Bank")
                        .HasForeignKey("EmployeePayroll.Entities.Bank", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeePayroll.Entities.Employee", b =>
                {
                    b.HasOne("EmployeePayroll.Entities.PayTemplates", "PayTemplate")
                        .WithMany()
                        .HasForeignKey("PayTemplateId");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.OpenBalances", b =>
                {
                    b.HasOne("EmployeePayroll.Entities.Employee", null)
                        .WithOne("OpenBalance")
                        .HasForeignKey("EmployeePayroll.Entities.OpenBalances", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeePayroll.Entities.LeaveLines", "LeaveLine")
                        .WithMany()
                        .HasForeignKey("LeaveLineId");
                });

            modelBuilder.Entity("EmployeePayroll.Entities.PayTemplates", b =>
                {
                    b.HasOne("EmployeePayroll.Entities.DeductionLines", "DeductionLine")
                        .WithMany()
                        .HasForeignKey("DeductionLineId");

                    b.HasOne("EmployeePayroll.Entities.EarningsLines", "EarningsLine")
                        .WithMany()
                        .HasForeignKey("EarningsLineId");

                    b.HasOne("EmployeePayroll.Entities.LeaveBalances", "LeaveBalance")
                        .WithMany()
                        .HasForeignKey("LeaveBalanceId");

                    b.HasOne("EmployeePayroll.Entities.LeaveLines", "LeaveLine")
                        .WithMany()
                        .HasForeignKey("LeaveLineId");

                    b.HasOne("EmployeePayroll.Entities.ReimbursementLines", "ReimbursementLine")
                        .WithMany()
                        .HasForeignKey("ReimbursementLineId");

                    b.HasOne("EmployeePayroll.Entities.SuperLines", "SuperLine")
                        .WithMany()
                        .HasForeignKey("SuperLineId");

                    b.HasOne("EmployeePayroll.Entities.SuperMemberships", "SuperMembership")
                        .WithMany()
                        .HasForeignKey("SuperMembershipId");
                });
#pragma warning restore 612, 618
        }
    }
}
